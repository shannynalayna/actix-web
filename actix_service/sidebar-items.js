initSidebarItems({"enum":[["Void","The empty type for cases which can't occur."]],"fn":[["apply_cfg","Create new ApplyConfig` service factory combinator"],["apply_fn","Apply tranform function to a service"],["apply_fn_factory","Create fractory for `apply_fn` service."],["apply_transform","Apply transform to service factory. Function returns services factory that in initialization creates service and applies transform to this service."],["fn_cfg_factory","Create `NewService` for function that can produce services with configuration"],["fn_factory","Create `NewService` for function that can produce services"],["fn_service","Create `NewService` for function that can act as Service"],["fn_transform","Use function as transform service"]],"mod":[["blank",""],["boxed",""]],"struct":[["AndThen","Service for the `and_then` combinator, chaining a computation onto the end of another service which completes successfully."],["AndThenNewService","`AndThenNewService` new service combinator"],["FnService",""],["FromErr","Service for the `from_err` combinator, changing the error type of a service."],["FromErrNewService","NewService for the `from_err` combinator, changing the type of a new service's error."],["Map","Service for the `map` combinator, changing the type of a service's response."],["MapErr","Service for the `map_err` combinator, changing the type of a service's error."],["MapErrNewService","NewService for the `map_err` combinator, changing the type of a new service's error."],["MapInitErr","`MapInitErr` service combinator"],["MapNewService","`MapNewService` new service combinator"],["Then","Service for the `then` combinator, chaining a computation onto the end of another service."],["ThenNewService","`ThenNewService` new service combinator"]],"trait":[["IntoConfigurableNewService","Trait for types that can be converted to a configurable `NewService`"],["IntoNewService","Trait for types that can be converted to a `NewService`"],["IntoService","Trait for types that can be converted to a `Service`"],["IntoTransform","Trait for types that can be converted to a transform service"],["NewService","Creates new `Service` values."],["Service","An asynchronous function from `Request` to a `Response`."],["ServiceExt","An extension trait for `Service`s that provides a variety of convenient adapters"],["Transform","The `Transform` trait defines the interface of a Service factory.  `Transform` is often implemented for middleware, defining how to manufacture a middleware Service.  A Service that is manufactured by the factory takes the Service that follows it during execution as a parameter, assuming ownership of the next Service.  A Service can be a variety of types, such as (but not limited to) another middleware Service, an extractor Service, other helper Services, or the request handler endpoint Service."]]});